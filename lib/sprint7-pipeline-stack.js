"use strict";
// Import statements
Object.defineProperty(exports, "__esModule", { value: true });
exports.sprint7FarhanPipelineStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib"); //  For stack class and for fetching secret from secretsmanager
const aws_iam_1 = require("aws-cdk-lib/aws-iam"); //  For creating pipeline IAM Role
const pipelines_1 = require("aws-cdk-lib/pipelines"); //  For creating code pipeline
const aws_codepipeline_actions_1 = require("aws-cdk-lib/aws-codepipeline-actions"); //  For Setting the github as trigger for the pipeline
const sprint7_infra_stage_1 = require("../lib/sprint7-infra-stage"); //  For Staging
// Defination Statements
class sprint7FarhanPipelineStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Create IAM role for pipeline
        const PipelineRole = new aws_iam_1.Role(this, 'cwRole', {
            assumedBy: new aws_iam_1.CompositePrincipal(// Composite Principle
            new aws_iam_1.ServicePrincipal("lambda.amazonaws.com"), // Lambda Default Permissions
            new aws_iam_1.ServicePrincipal("sns.amazonaws.com"), // Lambda SNS Permissions
            new aws_iam_1.ServicePrincipal("codebuild.amazonaws.com") // Lambda CodeBuild Permissions
            ),
            managedPolicies: [
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchFullAccess'),
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AmazonDynamoDBFullAccess"),
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AwsCloudFormationFullAccess"),
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AWSCodePipeline_FullAccess"),
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AmazonS3FullAccess"),
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName("AmazonAPIGatewayInvokeFullAccess"),
            ],
            description: "This is a IAM role for the application pipeline",
        });
        // Create constants that will be used by the pipeline
        const pipelineTrigger = aws_codepipeline_actions_1.GitHubTrigger.POLL; // Create pipeline trigger
        const piplineSecret = aws_cdk_lib_1.SecretValue.secretsManager("farhan_voyager_github"); // Set iam roles for pipeline
        // Create Pipeline
        const pipeline = new pipelines_1.CodePipeline(this, 'Pipeline_Farhan_Voyager', {
            pipelineName: 'Pipeline_Farhan_Voyager',
            synth: new pipelines_1.CodeBuildStep('Synth', {
                input: pipelines_1.CodePipelineSource.gitHub("farhan2022skipq/Voyager", "main", {
                    authentication: piplineSecret,
                    trigger: pipelineTrigger,
                }),
                commands: [
                    'cd ./farhan/sprint7',
                    'npm install',
                    "npm install -g aws-cdk",
                    'cd ./layers/nodejs',
                    'npm install',
                    'cd ../..',
                    'cd frontend',
                    'npm install',
                    'cd ..',
                    'npx cdk synth' // Create cloudformation template
                ],
                primaryOutputDirectory: "./farhan/sprint7/cdk.out",
                role: PipelineRole // Giving required roles to the pipeline
            }),
        });
        // Define stages
        const beta = new sprint7_infra_stage_1.sprint7FarhanInfraStage(this, "beta", { env: { account: '315997497220', region: 'us-west-1' }, }); // Create beta stage
        const prod = new sprint7_infra_stage_1.sprint7FarhanInfraStage(this, "prod", { env: { account: '315997497220', region: 'us-west-1' }, }); // Create prod stage
        // Define initial tests
        const init_test = new pipelines_1.ShellStep("Unit Test", {
            commands: [
                "cd ./farhan/sprint7",
                "npm install",
                "npm install -g aws-cdk",
                "npm run test" // Run Tests
            ]
        });
        pipeline.addStage(beta, {
            pre: [init_test] // Make sure that stage is only deployed if it passes the unit tests
        });
        pipeline.addStage(prod, {
            pre: [new pipelines_1.ManualApprovalStep("Farhan-Approval")] // Make sure that stage is only deployed if it is manually approved
        });
    }
}
exports.sprint7FarhanPipelineStack = sprint7FarhanPipelineStack;
//# sourceMappingURL=data:application/json;base64,