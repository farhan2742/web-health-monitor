"use strict";
// Import statements
Object.defineProperty(exports, "__esModule", { value: true });
exports.sprint7FarhanStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib"); // For Stack Fucntions and for Removal Policy Management
const aws_s3_1 = require("aws-cdk-lib/aws-s3"); // For creating a S3 bucket
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb"); // For creating a DynamoDB Table
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment"); // For uploading files to the created bucket
const aws_iam_1 = require("aws-cdk-lib/aws-iam"); // For IAM Roles
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda"); // For Lambda Fucntions
const aws_events_1 = require("aws-cdk-lib/aws-events"); // For For Lambda events
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets"); // For For Lambda targets
const aws_sns_1 = require("aws-cdk-lib/aws-sns"); // For creating an SNS topic
const aws_sns_subscriptions_1 = require("aws-cdk-lib/aws-sns-subscriptions"); // For adding subcriptions to the SNS topic
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch"); // For create metrics and alarms 
const aws_cloudwatch_actions_1 = require("aws-cdk-lib/aws-cloudwatch-actions"); // For setting actions to the alarms
const aws_codedeploy_1 = require("aws-cdk-lib/aws-codedeploy"); // For creating Alis and Deployment Groups
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway"); // For creating lambda backed apigateway
const path = require("path"); // For setting the path
const constants = require("../helpers/constants"); // Constants file
// Defination Statements
class sprint7FarhanStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Create a cors rule for S3 bucket
        const corsRule = {
            allowedMethods: [aws_s3_1.HttpMethods.GET],
            allowedOrigins: ['*'] // Allowed Headers for access
        };
        // Create S3 Bucket
        const websiteBucket = new aws_s3_1.Bucket(// Create a Public S3 bucket
        this, // Scope
        "sprint7WebsiteBucket", // Bucket ID
        {
            publicReadAccess: true,
            autoDeleteObjects: true,
            websiteIndexDocument: 'index.html',
            websiteErrorDocument: 'error.html',
            cors: [corsRule],
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY // Destroy bucket with stack
        });
        const websiteBucketName = websiteBucket.bucketName; // Fetch the name of the bucket that was created earlier
        // Deploy files to s3 bucket
        const Websitedeployment = new aws_s3_deployment_1.BucketDeployment(this, 'DeployWebsite', {
            sources: [aws_s3_deployment_1.Source.asset('./frontend/build')],
            destinationBucket: websiteBucket,
            prune: false // Dont delete existing files when a new file is uploaded
        });
        // Create DynamoDB Table
        const table = new aws_dynamodb_1.Table(this, // Scope
        "Farhan_Voyager_WHDB", // ID of the S3 Bucket
        {
            partitionKey: { name: constants.DYNAMO_DB_KEY, type: aws_dynamodb_1.AttributeType.STRING },
            sortKey: { name: constants.DYNAMO_DB_SORT, type: aws_dynamodb_1.AttributeType.STRING },
            contributorInsightsEnabled: true,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY // Set removal policy 
        });
        const tableName = table.tableName; // Fetch the name of the Table that was created earlier
        // Create IAM Roles and add Policies to IAM Roles
        const cwRole = new aws_iam_1.Role(this, 'cwRole', {
            assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
            description: "This is a IAM role for the webHealthLabda",
        });
        cwRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(constants.CLOUD_WATCH_POLICY)); // Add a managed policy to the role
        cwRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(constants.S3_POLICY)); // Add a managed policy to the role
        const dyDbRole = new aws_iam_1.Role(this, 'dyDbRole', {
            assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
            description: "This is a IAM role for the updateDBLambda",
        });
        dyDbRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(constants.DYNAMO_DB_POLICY)); // Add a managed policy to the role
        const apiRole = new aws_iam_1.Role(this, 'apiRole', {
            assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
            description: "This is a IAM role for the updateDBLambda",
        });
        apiRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(constants.API_GATEWAY_POLICY)); // Add a managed policy to the role
        apiRole.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(constants.CLOUD_WATCH_POLICY)); // Add a managed policy to the role
        const EmailLambdaTopic = new aws_sns_1.Topic(this, 'EmailLambdaTopic', {
            displayName: 'Email and Lambda alarm topic',
        });
        const EmailLambdaTopicARM = EmailLambdaTopic.topicArn;
        // Create Lambda Layers
        const lambdaLayer = new aws_lambda_1.LayerVersion(this, 'DependancyLayer', {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, '../layers')),
            compatibleRuntimes: [aws_lambda_1.Runtime.NODEJS_14_X],
        });
        // Create Lambda Functions
        const WebHealthLambda = new aws_lambda_1.Function(this, 'WebHealth', {
            runtime: aws_lambda_1.Runtime.NODEJS_14_X,
            handler: './webHealthLambda.WebHealth',
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, '../resources/Web-Health')),
            layers: [lambdaLayer],
            role: cwRole,
            timeout: aws_cdk_lib_1.Duration.minutes(1) // Set timeout duration of the lambda function
        });
        //WebHealthLambda.addEnvironment("BUCKET_NAME",bucketName);                                                                               // Add the name of the bucket as environment variable
        WebHealthLambda.addEnvironment("CLOUD_WATCH_NAMESPACE", constants.CLOUD_WATCH_NAMESPACE); // Add the Metrics Name Space as environment variable
        WebHealthLambda.addEnvironment("CLOUD_WATCH_DIMENSION_LATENCY", constants.CLOUD_WATCH_DIMENSION_LATENCY); // Add the name of the Latency Metric as environment variable
        WebHealthLambda.addEnvironment("CLOUD_WATCH_DIMENSION_AVAILABILITY", constants.CLOUD_WATCH_DIMENSION_AVAILABILITY); // Add the name of the Availability Metric  as environment variable
        WebHealthLambda.addEnvironment("ACTION_ARN", EmailLambdaTopicARM);
        //WebHealthLambda.addEnvironment("MONGO_DB_URI",constants.MONGO_DB_URI);                                                                  // Add the name of the Availability Metric  as environment variable
        const UpdateDBLambda = new aws_lambda_1.Function(this, 'updateDB', {
            runtime: aws_lambda_1.Runtime.NODEJS_14_X,
            handler: 'updateDBLambda.updateDBSNS',
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, '../resources/Dynamo-Log')),
            layers: [lambdaLayer],
            role: dyDbRole,
            timeout: aws_cdk_lib_1.Duration.minutes(1) // Set timeout duration of the lambda function
        });
        UpdateDBLambda.addEnvironment("DYNAMO_DB_NAME", tableName); // Add the name of the table as environment variable
        UpdateDBLambda.addEnvironment("DYNAMO_DB_KEY", constants.DYNAMO_DB_KEY); // Add the name of Table's Partition Key as environment variable
        UpdateDBLambda.addEnvironment("DYNAMO_DB_SORT", constants.DYNAMO_DB_SORT); // Add the name of Table's Sort Key as environment variable
        const ServerLambda = new aws_lambda_1.Function(this, 'serverLambda', {
            runtime: aws_lambda_1.Runtime.NODEJS_14_X,
            handler: 'serverLambda.handler',
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, '../resources/server')),
            layers: [lambdaLayer],
            role: apiRole,
            timeout: aws_cdk_lib_1.Duration.minutes(5) // Set timeout duration of the lambda function
        });
        // Create API Gateway
        const api = new aws_apigateway_1.LambdaRestApi(this, 'Farhan_Voyager_API', {
            handler: ServerLambda,
            defaultCorsPreflightOptions: {
                allowHeaders: [
                    'Content-Type',
                    'X-Amz-Date',
                    'Authorization',
                    'X-Api-Key',
                    'x-requested-with'
                ],
                allowMethods: ['OPTIONS', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
                allowCredentials: false,
                allowOrigins: ['*'],
            },
            proxy: false // Proxy to be false
        });
        const Root = api.root.addResource('url'); // Add root path to api
        const Create = Root.addResource('add'); // Add create path to api
        const Stats = Root.addResource('stats'); // Add stats path to api
        const Read = Root.addResource('fetch'); // Add read path to api
        const Update = Root.addResource('update'); // Add update path to api
        const Delete = Root.addResource('delete'); // Add delete path to api
        const subUrls = Root.addResource('subUrls'); // Add delete path to api
        const RootAuth = api.root.addResource('users');
        const Register = RootAuth.addResource('register');
        const Login = RootAuth.addResource('login');
        const Current = RootAuth.addResource('current');
        Read.addMethod('GET'); // Add GET method to read path
        Create.addMethod('POST'); // Add POST method to create path
        Stats.addMethod('POST'); // Add POST method to create path
        subUrls.addMethod('POST'); // Add Post method to subURL path
        Update.addMethod('PUT'); // Add PUT method to update path
        Delete.addMethod('DELETE'); // Add Delete method to delete path
        Register.addMethod('POST');
        Login.addMethod('POST');
        Current.addMethod('GET');
        // Create Rule to schedule Lambda Functon
        const rule = new aws_events_1.Rule(this, "WebHealth_Schedule_Rule", {
            description: "Web Health Lambda Schedule Rule Farhan Kiyani Voyager",
            schedule: aws_events_1.Schedule.cron({ minute: '*' }),
            targets: [new aws_events_targets_1.LambdaFunction(WebHealthLambda)] // Adding the target lambda function to be triggered by the rule
        });
        //  Create Topic for Alarms and add subscriptions to the topics
        EmailLambdaTopic.addSubscription(new aws_sns_subscriptions_1.EmailSubscription('farhan.kiyani.skipq@gmail.com')); // Add email subscription to the topic
        EmailLambdaTopic.addSubscription(new aws_sns_subscriptions_1.LambdaSubscription(UpdateDBLambda)); // Add lambda subscription to the topic
        const DeploymentGroupAlarmTopic = new aws_sns_1.Topic(this, 'DeploymentGroupAlarmTopic', {
            displayName: 'This topic is for deployment group failure alarms',
        });
        // Create Metric for deployment groups
        const failure_metric_group1_1 = new aws_cloudwatch_1.Metric({
            namespace: "AWS/Lambda",
            metricName: "Duration",
            dimensionsMap: { "FunctionName": WebHealthLambda.functionName },
        });
        const failure_metric_group1_2 = new aws_cloudwatch_1.Metric({
            namespace: "AWS/Lambda",
            metricName: "Invocations",
            dimensionsMap: { "FunctionName": WebHealthLambda.functionName },
        });
        const failure_metric_group1_3 = new aws_cloudwatch_1.Metric({
            namespace: "AWS/Lambda",
            metricName: "Errors",
            dimensionsMap: { "FunctionName": WebHealthLambda.functionName },
        });
        const failure_metric_group2_1 = new aws_cloudwatch_1.Metric({
            namespace: "AWS/Lambda",
            metricName: "Duration",
            dimensionsMap: { "FunctionName": UpdateDBLambda.functionName },
        });
        const failure_metric_group2_2 = new aws_cloudwatch_1.Metric({
            namespace: "AWS/Lambda",
            metricName: "Invocations",
            dimensionsMap: { "FunctionName": UpdateDBLambda.functionName },
        });
        const failure_metric_group2_3 = new aws_cloudwatch_1.Metric({
            namespace: "AWS/Lambda",
            metricName: "Errors",
            dimensionsMap: { "FunctionName": UpdateDBLambda.functionName },
        });
        // Create Alarms for deployment groups
        const failure_alarm_group1_1 = new aws_cloudwatch_1.Alarm(this, "WebHealthLambdaDurationAlarmFarhan", {
            alarmDescription: "This alarms is triggered when the duration of a lambda function is too high",
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: 3500,
            evaluationPeriods: 1,
            metric: failure_metric_group1_1 // Metric over which the alarm will be set
        });
        const failure_alarm_group1_2 = new aws_cloudwatch_1.Alarm(this, "WebHealthLambdaInvocationAlarmFarhan", {
            alarmDescription: "This alarms is triggered when there are too many invocations of a lambda function",
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: 10,
            evaluationPeriods: 1,
            metric: failure_metric_group1_2 // Metric over which the alarm will be set
        });
        const failure_alarm_group1_3 = new aws_cloudwatch_1.Alarm(this, "WebHealthLambdaErrorAlarmFarhan", {
            alarmDescription: "This alarms is triggered when there are errors during execution of a lambda function",
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: 0,
            evaluationPeriods: 1,
            metric: failure_metric_group1_3 // Metric over which the alarm will be set
        });
        const failure_alarm_group2_1 = new aws_cloudwatch_1.Alarm(this, "UpdateDBLambdaDurationAlarmFarhan", {
            alarmDescription: "This alarms is triggered when the duration of a lambda function is too high",
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: 500,
            evaluationPeriods: 1,
            metric: failure_metric_group2_1 // Metric over which the alarm will be set
        });
        const failure_alarm_group2_2 = new aws_cloudwatch_1.Alarm(this, "UpdateDBLambdaInvocationAlarmFarhan", {
            alarmDescription: "This alarms is triggered when there are errors during execution of a lambda function",
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: 10,
            evaluationPeriods: 1,
            metric: failure_metric_group2_2 // Metric over which the alarm will be set
        });
        const failure_alarm_group2_3 = new aws_cloudwatch_1.Alarm(this, "UpdateDBLambdaErrorAlarmFarhan", {
            alarmDescription: "This alarms is triggered when there are errors during execution of a lambda function",
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: 0,
            evaluationPeriods: 1,
            metric: failure_metric_group2_3 // Metric over which the alarm will be set
        });
        // Add actions to deployment group alarms
        failure_alarm_group1_1.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(DeploymentGroupAlarmTopic)); // Set an SNS action to that alarm
        failure_alarm_group1_2.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(DeploymentGroupAlarmTopic)); // Set an SNS action to that alarm
        failure_alarm_group1_3.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(DeploymentGroupAlarmTopic)); // Set an SNS action to that alarm
        failure_alarm_group2_1.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(DeploymentGroupAlarmTopic)); // Set an SNS action to that alarm
        failure_alarm_group2_2.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(DeploymentGroupAlarmTopic)); // Set an SNS action to that alarm
        failure_alarm_group2_3.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(DeploymentGroupAlarmTopic)); // Set an SNS action to that alarm
        // Create Alias for Lambda functions
        const aliasWebHealth = new aws_lambda_1.Alias(this, 'WHLambdaAlias', {
            aliasName: 'WHLambdaCurrent',
            version: WebHealthLambda.currentVersion,
        });
        const aliasUpdateDB = new aws_lambda_1.Alias(this, 'UpdateDBLambdaAlias', {
            aliasName: 'UpdateDBLambdaCurrent',
            version: UpdateDBLambda.currentVersion,
        });
        // Create Deployment Groups for Lambda Functions
        const deployment_group1 = new aws_codedeploy_1.LambdaDeploymentGroup(this, 'Farhan_Prod_Deployment_WHL', {
            alias: aliasWebHealth,
            deploymentConfig: aws_codedeploy_1.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_10MINUTES,
            alarms: [failure_alarm_group1_1, failure_alarm_group1_2, failure_alarm_group1_3] // Alarms that will be used for auto roll back
        });
        const deployment_group2 = new aws_codedeploy_1.LambdaDeploymentGroup(this, 'Farhan_Prod_Deployment_UPDBL', {
            alias: aliasUpdateDB,
            deploymentConfig: aws_codedeploy_1.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_10MINUTES,
            alarms: [failure_alarm_group2_1, failure_alarm_group2_2, failure_alarm_group2_3] // Alarms that will be used for auto roll back
        });
    }
}
exports.sprint7FarhanStack = sprint7FarhanStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ByaW50Ny1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNwcmludDctc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjs7O0FBRXBCLDZDQUF5RSxDQUFtRSx3REFBd0Q7QUFDcE0sK0NBQW1FLENBQXlFLDJCQUEyQjtBQUN2SywyREFBZ0UsQ0FBNEUsZ0NBQWdDO0FBQzVLLHFFQUF5RSxDQUFtRSw0Q0FBNEM7QUFDeEwsaURBQWtILENBQTBCLGdCQUFnQjtBQUM1Six1REFBbUcsQ0FBeUMsdUJBQXVCO0FBQ25LLHVEQUF3RCxDQUFvRix3QkFBd0I7QUFDcEssdUVBQWdFLENBQTRFLHlCQUF5QjtBQUNySyxpREFBNEMsQ0FBZ0csNEJBQTRCO0FBQ3hLLDZFQUEwRixDQUFrRCwyQ0FBMkM7QUFDdkwsK0RBQStFLENBQTZELGlDQUFpQztBQUM3SywrRUFBK0QsQ0FBNkUsb0NBQW9DO0FBQ2hMLCtEQUEyRixDQUFpRCwwQ0FBMEM7QUFDdEwsK0RBQXlGLENBQWlGLHdDQUF3QztBQUVsTiw2QkFBNkIsQ0FBK0csdUJBQXVCO0FBQ25LLGtEQUFpRCxDQUEyRixpQkFBaUI7QUFJN0osd0JBQXdCO0FBRXhCLE1BQWEsa0JBQW1CLFNBQVEsbUJBQUs7SUFDM0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUMxRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixtQ0FBbUM7UUFFbkMsTUFBTSxRQUFRLEdBQWE7WUFDekIsY0FBYyxFQUFFLENBQUMsb0JBQVcsQ0FBQyxHQUFHLENBQUM7WUFDakMsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQWlILDZCQUE2QjtTQUNwSyxDQUFDO1FBRUYsbUJBQW1CO1FBRW5CLE1BQU0sYUFBYSxHQUFHLElBQUksZUFBTSxDQUF3Ryw0QkFBNEI7UUFDbEssSUFBSSxFQUFrSSxRQUFRO1FBQzlJLHNCQUFzQixFQUFnSCxZ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LEVBQUUsdUNBQXNCLENBQUMsZ0NBQWdDO1lBQ3pFLE1BQU0sRUFBRSxDQUFDLHNCQUFzQixFQUFDLHNCQUFzQixFQUFDLHNCQUFzQixDQUFDLENBQXdELDhDQUE4QztTQUNyTCxDQUFDLENBQUM7SUFFTCxDQUFDO0NBQ0Y7QUF4VEQsZ0RBd1RDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IHN0YXRlbWVudHNcblxuaW1wb3J0IHsgU3RhY2ssIFN0YWNrUHJvcHMsIFJlbW92YWxQb2xpY3ksIER1cmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWInOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgU3RhY2sgRnVjbnRpb25zIGFuZCBmb3IgUmVtb3ZhbCBQb2xpY3kgTWFuYWdlbWVudFxuaW1wb3J0IHsgQnVja2V0LCBDb3JzUnVsZSwgSHR0cE1ldGhvZHMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgY3JlYXRpbmcgYSBTMyBidWNrZXRcbmltcG9ydCB7IFRhYmxlLCBBdHRyaWJ1dGVUeXBlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGNyZWF0aW5nIGEgRHluYW1vREIgVGFibGVcbmltcG9ydCB7IEJ1Y2tldERlcGxveW1lbnQsIFNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMy1kZXBsb3ltZW50JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHVwbG9hZGluZyBmaWxlcyB0byB0aGUgY3JlYXRlZCBidWNrZXRcbmltcG9ydCB7IFJvbGUsIFNlcnZpY2VQcmluY2lwYWwsIFBvbGljeVN0YXRlbWVudCwgTWFuYWdlZFBvbGljeSwgQ29tcG9zaXRlUHJpbmNpcGFsICB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIElBTSBSb2xlc1xuaW1wb3J0IHsgRnVuY3Rpb24gYXMgTGFtYmRhRnVuLCBSdW50aW1lLCBDb2RlLCBBbGlhcywgTGF5ZXJWZXJzaW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgTGFtYmRhIEZ1Y250aW9uc1xuaW1wb3J0IHsgUnVsZSwgU2NoZWR1bGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZXZlbnRzJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgRm9yIExhbWJkYSBldmVudHNcbmltcG9ydCB7IExhbWJkYUZ1bmN0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWV2ZW50cy10YXJnZXRzJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIEZvciBMYW1iZGEgdGFyZ2V0c1xuaW1wb3J0IHsgVG9waWMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc25zJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgY3JlYXRpbmcgYW4gU05TIHRvcGljXG5pbXBvcnQgeyBFbWFpbFN1YnNjcmlwdGlvbiwgTGFtYmRhU3Vic2NyaXB0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXNucy1zdWJzY3JpcHRpb25zJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBhZGRpbmcgc3ViY3JpcHRpb25zIHRvIHRoZSBTTlMgdG9waWNcbmltcG9ydCB7IE1ldHJpYywgQWxhcm0sIENvbXBhcmlzb25PcGVyYXRvciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGNyZWF0ZSBtZXRyaWNzIGFuZCBhbGFybXMgXG5pbXBvcnQgeyBTbnNBY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaC1hY3Rpb25zJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBzZXR0aW5nIGFjdGlvbnMgdG8gdGhlIGFsYXJtc1xuaW1wb3J0IHsgTGFtYmRhRGVwbG95bWVudEdyb3VwLCBMYW1iZGFEZXBsb3ltZW50Q29uZmlnIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWNvZGVkZXBsb3knOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgY3JlYXRpbmcgQWxpcyBhbmQgRGVwbG95bWVudCBHcm91cHNcbmltcG9ydCB7ICBMYW1iZGFSZXN0QXBpLCBJbnRlZ3JhdGlvbiwgSW50ZWdyYXRpb25UeXBlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXknICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGNyZWF0aW5nIGxhbWJkYSBiYWNrZWQgYXBpZ2F0ZXdheVxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBV1MgQ29uc3RydWN0IExpYnJhcnlcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHNldHRpbmcgdGhlIHBhdGhcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuLi9oZWxwZXJzL2NvbnN0YW50cycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uc3RhbnRzIGZpbGVcblxuXG5cbi8vIERlZmluYXRpb24gU3RhdGVtZW50c1xuXG5leHBvcnQgY2xhc3Mgc3ByaW50N0ZhcmhhblN0YWNrIGV4dGVuZHMgU3RhY2sgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1haW4gc3RhY2sgY2xhc3NcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhY2sgSW5pdGlhbGl6YXRpb24gZnVuY3Rpb25cbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAvLyBDcmVhdGUgYSBjb3JzIHJ1bGUgZm9yIFMzIGJ1Y2tldFxuICAgIFxuICAgIGNvbnN0IGNvcnNSdWxlOiBDb3JzUnVsZSA9IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBDT1JTIFJ1bGVcbiAgICAgIGFsbG93ZWRNZXRob2RzOiBbSHR0cE1ldGhvZHMuR0VUXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3dlZCBtZXRob2QgZm9yIGFjY2Vzc1xuICAgICAgYWxsb3dlZE9yaWdpbnM6IFsnKiddICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvd2VkIEhlYWRlcnMgZm9yIGFjY2Vzc1xuICAgIH07XG4gICAgXG4gICAgLy8gQ3JlYXRlIFMzIEJ1Y2tldFxuICAgIFxuICAgIGNvbnN0IHdlYnNpdGVCdWNrZXQgPSBuZXcgQnVja2V0KCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBQdWJsaWMgUzMgYnVja2V0XG4gICAgICB0aGlzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNjb3BlXG4gICAgICBcInNwcmludDdXZWJzaXRlQnVja2V0XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVja2V0IElEXG4gICAgICB7XG4gICAgICAgIHB1YmxpY1JlYWRBY2Nlc3M6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1YmxpYyBSZWFkIEFjY2Vzc1xuICAgICAgICBhdXRvRGVsZXRlT2JqZWN0czogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgZmlsZXMgaW4gdGhlIGJ1Y2tldCBkdXJpbmcgcmVtb3ZhbFxuICAgICAgICB3ZWJzaXRlSW5kZXhEb2N1bWVudDogJ2luZGV4Lmh0bWwnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnRyeSBQb2ludCB0byBGcm9udGVuZCBXZWJzaXRlXG4gICAgICAgIHdlYnNpdGVFcnJvckRvY3VtZW50OiAnZXJyb3IuaHRtbCcsXG4gICAgICAgIGNvcnM6ICBbY29yc1J1bGVdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENPUlMgQ29uZmlndXJhdGlvblxuICAgICAgICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXN0cm95IGJ1Y2tldCB3aXRoIHN0YWNrXG4gICAgICB9XG4gICAgKTtcbiAgICBjb25zdCB3ZWJzaXRlQnVja2V0TmFtZSA9IHdlYnNpdGVCdWNrZXQuYnVja2V0TmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmV0Y2ggdGhlIG5hbWUgb2YgdGhlIGJ1Y2tldCB0aGF0IHdhcyBjcmVhdGVkIGVhcmxpZXJcbiAgICBcbiAgICAvLyBEZXBsb3kgZmlsZXMgdG8gczMgYnVja2V0XG4gICAgXG4gICAgY29uc3QgV2Vic2l0ZWRlcGxveW1lbnQgPSBuZXcgQnVja2V0RGVwbG95bWVudCh0aGlzLCAnRGVwbG95V2Vic2l0ZScsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlcGxveSBmaWxlcyB0byB0aGUgczMgYnVja2V0XG4gICAgICBzb3VyY2VzOiBbU291cmNlLmFzc2V0KCcuL2Zyb250ZW5kL2J1aWxkJyldLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExvY2F0aW9uIG9mIHRoZSBmaWxlcyB0byBiZSB1cGxvYWRlZFxuICAgICAgZGVzdGluYXRpb25CdWNrZXQ6IHdlYnNpdGVCdWNrZXQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBidWNrZXQgd2hlcmUgZmlsZXMgd2lsbCBiZSB1cGxvYWRlZFxuICAgICAgcHJ1bmU6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb250IGRlbGV0ZSBleGlzdGluZyBmaWxlcyB3aGVuIGEgbmV3IGZpbGUgaXMgdXBsb2FkZWRcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgRHluYW1vREIgVGFibGVcbiAgICBcbiAgICBjb25zdCB0YWJsZSA9IG5ldyBUYWJsZShcbiAgICAgICAgdGhpcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2NvcGVcbiAgICAgICAgXCJGYXJoYW5fVm95YWdlcl9XSERCXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJRCBvZiB0aGUgUzMgQnVja2V0XG4gICAgICAgIHtcbiAgICAgICAgICAgIHBhcnRpdGlvbktleTogeyBuYW1lOiBjb25zdGFudHMuRFlOQU1PX0RCX0tFWSwgdHlwZTogQXR0cmlidXRlVHlwZS5TVFJJTkcgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFydGl0aW9uIEtleSBmb3IgdGhlIHRhYmxlXG4gICAgICAgICAgICBzb3J0S2V5OiB7bmFtZTogY29uc3RhbnRzLkRZTkFNT19EQl9TT1JULCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvcnQgS2V5IGZvciB0aGUgdGFibGUgXG4gICAgICAgICAgICBjb250cmlidXRvckluc2lnaHRzRW5hYmxlZDogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBjbG91ZHdhdGNoIGNvbnRyaWJ1dGVyIGluc2lnaHRzXG4gICAgICAgICAgICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1kgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCByZW1vdmFsIHBvbGljeSBcbiAgICAgICAgfVxuICAgICk7XG4gICAgXG4gICAgY29uc3QgdGFibGVOYW1lID0gdGFibGUudGFibGVOYW1lOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZldGNoIHRoZSBuYW1lIG9mIHRoZSBUYWJsZSB0aGF0IHdhcyBjcmVhdGVkIGVhcmxpZXJcbiAgICBcbiAgICAvLyBDcmVhdGUgSUFNIFJvbGVzIGFuZCBhZGQgUG9saWNpZXMgdG8gSUFNIFJvbGVzXG4gICAgXG4gICAgY29uc3QgY3dSb2xlID0gbmV3IFJvbGUodGhpcywgJ2N3Um9sZScsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBJQU0gUm9sZXNcbiAgICAgIGFzc3VtZWRCeTogbmV3IFNlcnZpY2VQcmluY2lwYWwoJ2xhbWJkYS5hbWF6b25hd3MuY29tJyksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGRlZmF1bHQgcG9saWN5IGZvciB0aGUgcm9sZVxuICAgICAgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBhIElBTSByb2xlIGZvciB0aGUgd2ViSGVhbHRoTGFiZGFcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgSUFNIHJvbGUncyBkZXNjcmlwdGlvblxuICAgIH0pO1xuICAgIFxuICAgIGN3Um9sZS5hZGRNYW5hZ2VkUG9saWN5KE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKGNvbnN0YW50cy5DTE9VRF9XQVRDSF9QT0xJQ1kpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSBtYW5hZ2VkIHBvbGljeSB0byB0aGUgcm9sZVxuICAgIGN3Um9sZS5hZGRNYW5hZ2VkUG9saWN5KE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKGNvbnN0YW50cy5TM19QT0xJQ1kpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSBtYW5hZ2VkIHBvbGljeSB0byB0aGUgcm9sZVxuICAgIFxuICAgIGNvbnN0IGR5RGJSb2xlID0gbmV3IFJvbGUodGhpcywgJ2R5RGJSb2xlJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGdW5jdGlvbiB0byBjcmVhdGUgSUFNIFJvbGVzXG4gICAgICBhc3N1bWVkQnk6IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdsYW1iZGEuYW1hem9uYXdzLmNvbScpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBkZWZhdWx0IHBvbGljeSBmb3IgdGhlIHJvbGVcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoaXMgaXMgYSBJQU0gcm9sZSBmb3IgdGhlIHVwZGF0ZURCTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIElBTSByb2xlJ3MgZGVzY3JpcHRpb25cbiAgICB9KTtcbiAgICBcbiAgICBkeURiUm9sZS5hZGRNYW5hZ2VkUG9saWN5KE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKGNvbnN0YW50cy5EWU5BTU9fREJfUE9MSUNZKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGEgbWFuYWdlZCBwb2xpY3kgdG8gdGhlIHJvbGVcbiAgICBcbiAgICBjb25zdCBhcGlSb2xlID0gbmV3IFJvbGUodGhpcywgJ2FwaVJvbGUnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRnVuY3Rpb24gdG8gY3JlYXRlIElBTSBSb2xlc1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgU2VydmljZVByaW5jaXBhbCgnbGFtYmRhLmFtYXpvbmF3cy5jb20nKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZGVmYXVsdCBwb2xpY3kgZm9yIHRoZSByb2xlXG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGlzIGlzIGEgSUFNIHJvbGUgZm9yIHRoZSB1cGRhdGVEQkxhbWJkYVwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBJQU0gcm9sZSdzIGRlc2NyaXB0aW9uXG4gICAgfSk7XG4gICAgXG4gICAgYXBpUm9sZS5hZGRNYW5hZ2VkUG9saWN5KE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKGNvbnN0YW50cy5BUElfR0FURVdBWV9QT0xJQ1kpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGEgbWFuYWdlZCBwb2xpY3kgdG8gdGhlIHJvbGVcbiAgICBhcGlSb2xlLmFkZE1hbmFnZWRQb2xpY3koTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoY29uc3RhbnRzLkNMT1VEX1dBVENIX1BPTElDWSkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSBtYW5hZ2VkIHBvbGljeSB0byB0aGUgcm9sZVxuICAgIFxuICAgIGNvbnN0IEVtYWlsTGFtYmRhVG9waWMgPSBuZXcgVG9waWModGhpcywgJ0VtYWlsTGFtYmRhVG9waWMnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgU05TIHRvcGljXG4gICAgICBkaXNwbGF5TmFtZTogJ0VtYWlsIGFuZCBMYW1iZGEgYWxhcm0gdG9waWMnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgbmFtZSBvZiB0aGUgdG9waWNcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBFbWFpbExhbWJkYVRvcGljQVJNID0gRW1haWxMYW1iZGFUb3BpYy50b3BpY0FyblxuICAgIFxuICAgIC8vIENyZWF0ZSBMYW1iZGEgTGF5ZXJzXG4gICAgXG4gICAgY29uc3QgbGFtYmRhTGF5ZXIgPSBuZXcgTGF5ZXJWZXJzaW9uKHRoaXMsICdEZXBlbmRhbmN5TGF5ZXInLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGRlcGVuZGFuY3kgbGF5ZXIgZm9yIGxhbWJkYSBmdWN0aW9uc1xuICAgICAgcmVtb3ZhbFBvbGljeTogUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgcmVtb3ZhbCBwb2xpY3kgZm9yIHRoZSBsYW1iZGEgbGF5ZXJcbiAgICAgIGNvZGU6IENvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9sYXllcnMnKSksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHBhdGggb2YgZmlsZXMgZm9yIHRoZSBsYW1iZGEgbGF5ZXJcbiAgICAgIGNvbXBhdGlibGVSdW50aW1lczogW1J1bnRpbWUuTk9ERUpTXzE0X1hdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBydW50aW1lIGVudmlyb25tZW50IGZvciB0aGUgbGFtYmRhIGxheWVyXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIExhbWJkYSBGdW5jdGlvbnNcbiAgICBcbiAgICBjb25zdCBXZWJIZWFsdGhMYW1iZGEgPSBuZXcgTGFtYmRhRnVuKHRoaXMsICdXZWJIZWFsdGgnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xNF9YLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBydW50aW1lIGxpYnJhcnkgb2YgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgICAgaGFuZGxlcjogJy4vd2ViSGVhbHRoTGFtYmRhLldlYkhlYWx0aCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGhhbmRsZXIgb2YgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgICAgY29kZTogQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3Jlc291cmNlcy9XZWItSGVhbHRoJykpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBjb2RlIGZvciB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBsYXllcnM6IFtsYW1iZGFMYXllcl0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVwZW5kYW5jeSBsYXllciBmb3IgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgICAgcm9sZTogY3dSb2xlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIElBTSBSb2xlIGZvciB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5taW51dGVzKDEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aW1lb3V0IGR1cmF0aW9uIG9mIHRoZSBsYW1iZGEgZnVuY3Rpb25cbiAgICB9KTtcbiAgICBcbiAgICAvL1dlYkhlYWx0aExhbWJkYS5hZGRFbnZpcm9ubWVudChcIkJVQ0tFVF9OQU1FXCIsYnVja2V0TmFtZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbmFtZSBvZiB0aGUgYnVja2V0IGFzIGVudmlyb25tZW50IHZhcmlhYmxlXG4gICAgV2ViSGVhbHRoTGFtYmRhLmFkZEVudmlyb25tZW50KFwiQ0xPVURfV0FUQ0hfTkFNRVNQQUNFXCIsY29uc3RhbnRzLkNMT1VEX1dBVENIX05BTUVTUEFDRSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBNZXRyaWNzIE5hbWUgU3BhY2UgYXMgZW52aXJvbm1lbnQgdmFyaWFibGVcbiAgICBXZWJIZWFsdGhMYW1iZGEuYWRkRW52aXJvbm1lbnQoXCJDTE9VRF9XQVRDSF9ESU1FTlNJT05fTEFURU5DWVwiLGNvbnN0YW50cy5DTE9VRF9XQVRDSF9ESU1FTlNJT05fTEFURU5DWSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIG5hbWUgb2YgdGhlIExhdGVuY3kgTWV0cmljIGFzIGVudmlyb25tZW50IHZhcmlhYmxlXG4gICAgV2ViSGVhbHRoTGFtYmRhLmFkZEVudmlyb25tZW50KFwiQ0xPVURfV0FUQ0hfRElNRU5TSU9OX0FWQUlMQUJJTElUWVwiLGNvbnN0YW50cy5DTE9VRF9XQVRDSF9ESU1FTlNJT05fQVZBSUxBQklMSVRZKTsgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBuYW1lIG9mIHRoZSBBdmFpbGFiaWxpdHkgTWV0cmljICBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgIFdlYkhlYWx0aExhbWJkYS5hZGRFbnZpcm9ubWVudChcIkFDVElPTl9BUk5cIixFbWFpbExhbWJkYVRvcGljQVJNKTtcbiAgICAvL1dlYkhlYWx0aExhbWJkYS5hZGRFbnZpcm9ubWVudChcIk1PTkdPX0RCX1VSSVwiLGNvbnN0YW50cy5NT05HT19EQl9VUkkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbmFtZSBvZiB0aGUgQXZhaWxhYmlsaXR5IE1ldHJpYyAgYXMgZW52aXJvbm1lbnQgdmFyaWFibGVcbiAgICBcbiAgICBjb25zdCBVcGRhdGVEQkxhbWJkYSA9IG5ldyBMYW1iZGFGdW4odGhpcywgJ3VwZGF0ZURCJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xNF9YLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBydW50aW1lIGxpYnJhcnkgb2YgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgICAgaGFuZGxlcjogJ3VwZGF0ZURCTGFtYmRhLnVwZGF0ZURCU05TJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGhhbmRsZXIgb2YgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgICAgY29kZTogQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3Jlc291cmNlcy9EeW5hbW8tTG9nJykpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBjb2RlIGZvciB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBsYXllcnM6IFtsYW1iZGFMYXllcl0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGVwZW5kYW5jeSBsYXllciBmb3IgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgICAgcm9sZTogZHlEYlJvbGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIElBTSBSb2xlIGZvciB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5taW51dGVzKDEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aW1lb3V0IGR1cmF0aW9uIG9mIHRoZSBsYW1iZGEgZnVuY3Rpb25cbiAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgXG4gICAgVXBkYXRlREJMYW1iZGEuYWRkRW52aXJvbm1lbnQoXCJEWU5BTU9fREJfTkFNRVwiLHRhYmxlTmFtZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBuYW1lIG9mIHRoZSB0YWJsZSBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgIFVwZGF0ZURCTGFtYmRhLmFkZEVudmlyb25tZW50KFwiRFlOQU1PX0RCX0tFWVwiLGNvbnN0YW50cy5EWU5BTU9fREJfS0VZKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbmFtZSBvZiBUYWJsZSdzIFBhcnRpdGlvbiBLZXkgYXMgZW52aXJvbm1lbnQgdmFyaWFibGVcbiAgICBVcGRhdGVEQkxhbWJkYS5hZGRFbnZpcm9ubWVudChcIkRZTkFNT19EQl9TT1JUXCIsY29uc3RhbnRzLkRZTkFNT19EQl9TT1JUKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIG5hbWUgb2YgVGFibGUncyBTb3J0IEtleSBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgIFxuICAgIGNvbnN0IFNlcnZlckxhbWJkYSA9IG5ldyBMYW1iZGFGdW4odGhpcywgJ3NlcnZlckxhbWJkYScsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBsYW1iZGEgZnVuY3Rpb25cbiAgICAgIHJ1bnRpbWU6IFJ1bnRpbWUuTk9ERUpTXzE0X1gsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHJ1bnRpbWUgbGlicmFyeSBvZiB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBoYW5kbGVyOiAnc2VydmVyTGFtYmRhLmhhbmRsZXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgaGFuZGxlciBvZiB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBjb2RlOiBDb2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vcmVzb3VyY2VzL3NlcnZlcicpKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgbG9jYXRpb24gb2YgdGhlIGNvZGUgZm9yIHRoZSBsYW1iZGEgZnVuY3Rpb25cbiAgICAgIGxheWVyczogW2xhbWJkYUxheWVyXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBkZXBlbmRhbmN5IGxheWVyIGZvciB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICByb2xlOiBhcGlSb2xlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgSUFNIFJvbGUgZm9yIHRoZSBsYW1iZGEgZnVuY3Rpb25cbiAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLm1pbnV0ZXMoNSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRpbWVvdXQgZHVyYXRpb24gb2YgdGhlIGxhbWJkYSBmdW5jdGlvblxuICAgIH0pOyAgIFxuICAgIFxuICAgIC8vIENyZWF0ZSBBUEkgR2F0ZXdheVxuICAgIFxuICAgIGNvbnN0IGFwaSA9IG5ldyBMYW1iZGFSZXN0QXBpKHRoaXMsICdGYXJoYW5fVm95YWdlcl9BUEknLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgUkVTVGZ1bCBBcGlcbiAgICAgIGhhbmRsZXI6IFNlcnZlckxhbWJkYSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlciBmb3IgdGhlIGFwaVxuICAgICAgZGVmYXVsdENvcnNQcmVmbGlnaHRPcHRpb25zOiB7XG4gICAgICAgIGFsbG93SGVhZGVyczogW1xuICAgICAgICAgICdDb250ZW50LVR5cGUnLFxuICAgICAgICAgICdYLUFtei1EYXRlJyxcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbicsXG4gICAgICAgICAgJ1gtQXBpLUtleScsXG4gICAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnXG4gICAgICAgIF0sXG4gICAgICAgIGFsbG93TWV0aG9kczogWydPUFRJT05TJywgJ0dFVCcsICdQT1NUJywgJ1BVVCcsICdQQVRDSCcsICdERUxFVEUnXSxcbiAgICAgICAgYWxsb3dDcmVkZW50aWFsczogZmFsc2UsXG4gICAgICAgIGFsbG93T3JpZ2luczogWycqJ10sXG4gICAgICB9LFxuICAgICAgcHJveHk6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcm94eSB0byBiZSBmYWxzZVxuICAgIH0pXG4gICAgXG4gICAgY29uc3QgUm9vdCAgICAgID0gYXBpLnJvb3QuYWRkUmVzb3VyY2UoJ3VybCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCByb290IHBhdGggdG8gYXBpXG4gICAgY29uc3QgQ3JlYXRlICAgID0gUm9vdC5hZGRSZXNvdXJjZSgnYWRkJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBjcmVhdGUgcGF0aCB0byBhcGlcbiAgICBjb25zdCBTdGF0cyAgICAgPSBSb290LmFkZFJlc291cmNlKCdzdGF0cycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc3RhdHMgcGF0aCB0byBhcGlcbiAgICBjb25zdCBSZWFkICAgICAgPSBSb290LmFkZFJlc291cmNlKCdmZXRjaCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHJlYWQgcGF0aCB0byBhcGlcbiAgICBjb25zdCBVcGRhdGUgICAgPSBSb290LmFkZFJlc291cmNlKCd1cGRhdGUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHVwZGF0ZSBwYXRoIHRvIGFwaVxuICAgIGNvbnN0IERlbGV0ZSAgICA9IFJvb3QuYWRkUmVzb3VyY2UoJ2RlbGV0ZScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgZGVsZXRlIHBhdGggdG8gYXBpXG4gICAgY29uc3Qgc3ViVXJscyAgID0gUm9vdC5hZGRSZXNvdXJjZSgnc3ViVXJscycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBkZWxldGUgcGF0aCB0byBhcGlcbiAgICBjb25zdCBSb290QXV0aCAgPSBhcGkucm9vdC5hZGRSZXNvdXJjZSgndXNlcnMnKTtcbiAgICBjb25zdCBSZWdpc3RlciAgPSBSb290QXV0aC5hZGRSZXNvdXJjZSgncmVnaXN0ZXInKTsgXG4gICAgY29uc3QgTG9naW4gID0gUm9vdEF1dGguYWRkUmVzb3VyY2UoJ2xvZ2luJyk7XG4gICAgY29uc3QgQ3VycmVudCAgPSBSb290QXV0aC5hZGRSZXNvdXJjZSgnY3VycmVudCcpO1xuICAgIFxuICAgIFJlYWQuYWRkTWV0aG9kKCdHRVQnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgR0VUIG1ldGhvZCB0byByZWFkIHBhdGhcbiAgICBDcmVhdGUuYWRkTWV0aG9kKCdQT1NUJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIFBPU1QgbWV0aG9kIHRvIGNyZWF0ZSBwYXRoXG4gICAgU3RhdHMuYWRkTWV0aG9kKCdQT1NUJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIFBPU1QgbWV0aG9kIHRvIGNyZWF0ZSBwYXRoXG4gICAgc3ViVXJscy5hZGRNZXRob2QoJ1BPU1QnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBQb3N0IG1ldGhvZCB0byBzdWJVUkwgcGF0aFxuICAgIFVwZGF0ZS5hZGRNZXRob2QoJ1BVVCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgUFVUIG1ldGhvZCB0byB1cGRhdGUgcGF0aFxuICAgIERlbGV0ZS5hZGRNZXRob2QoJ0RFTEVURScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgRGVsZXRlIG1ldGhvZCB0byBkZWxldGUgcGF0aFxuICAgIFJlZ2lzdGVyLmFkZE1ldGhvZCgnUE9TVCcpO1xuICAgIExvZ2luLmFkZE1ldGhvZCgnUE9TVCcpO1xuICAgIEN1cnJlbnQuYWRkTWV0aG9kKCdHRVQnKTtcbiAgICBcbiAgICAvLyBDcmVhdGUgUnVsZSB0byBzY2hlZHVsZSBMYW1iZGEgRnVuY3RvblxuICAgIFxuICAgIGNvbnN0IHJ1bGUgPSBuZXcgUnVsZSh0aGlzLFwiV2ViSGVhbHRoX1NjaGVkdWxlX1J1bGVcIiwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBzY2hkdWxlciBydWxlIGZvciB3ZWIgaGVhbHRoIGxhbWJkYVxuICAgICAgZGVzY3JpcHRpb246IFwiV2ViIEhlYWx0aCBMYW1iZGEgU2NoZWR1bGUgUnVsZSBGYXJoYW4gS2l5YW5pIFZveWFnZXJcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJ1bGUgRGVzY3JpcHRpb25cbiAgICAgIHNjaGVkdWxlOiBTY2hlZHVsZS5jcm9uKHsgbWludXRlOiAnKid9KSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2NoZWR1bGUgY3JlYXRpb24gdXNpbmcgY3JvbiBmdW5jdGlvblxuICAgICAgdGFyZ2V0czogW25ldyBMYW1iZGFGdW5jdGlvbihXZWJIZWFsdGhMYW1iZGEpXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRpbmcgdGhlIHRhcmdldCBsYW1iZGEgZnVuY3Rpb24gdG8gYmUgdHJpZ2dlcmVkIGJ5IHRoZSBydWxlXG4gICAgfSk7XG4gICAgXG4gICAgLy8gIENyZWF0ZSBUb3BpYyBmb3IgQWxhcm1zIGFuZCBhZGQgc3Vic2NyaXB0aW9ucyB0byB0aGUgdG9waWNzXG4gICAgXG4gICAgRW1haWxMYW1iZGFUb3BpYy5hZGRTdWJzY3JpcHRpb24obmV3IEVtYWlsU3Vic2NyaXB0aW9uKCdmYXJoYW4ua2l5YW5pLnNraXBxQGdtYWlsLmNvbScpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBlbWFpbCBzdWJzY3JpcHRpb24gdG8gdGhlIHRvcGljXG4gICAgRW1haWxMYW1iZGFUb3BpYy5hZGRTdWJzY3JpcHRpb24obmV3IExhbWJkYVN1YnNjcmlwdGlvbihVcGRhdGVEQkxhbWJkYSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBsYW1iZGEgc3Vic2NyaXB0aW9uIHRvIHRoZSB0b3BpY1xuICAgIFxuICAgIFxuICAgIGNvbnN0IERlcGxveW1lbnRHcm91cEFsYXJtVG9waWMgPSBuZXcgVG9waWModGhpcywgJ0RlcGxveW1lbnRHcm91cEFsYXJtVG9waWMnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgU05TIHRvcGljXG4gICAgICBkaXNwbGF5TmFtZTogJ1RoaXMgdG9waWMgaXMgZm9yIGRlcGxveW1lbnQgZ3JvdXAgZmFpbHVyZSBhbGFybXMnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgbmFtZSBvZiB0aGUgdG9waWNcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgTWV0cmljIGZvciBkZXBsb3ltZW50IGdyb3Vwc1xuICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfbWV0cmljX2dyb3VwMV8xID0gbmV3IE1ldHJpYyh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbWV0cmljXG4gICAgICAgIG5hbWVzcGFjZTogXCJBV1MvTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgbWV0cmljTmFtZTogXCJEdXJhdGlvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgZGltZW5zaW9uc01hcDoge1wiRnVuY3Rpb25OYW1lXCI6V2ViSGVhbHRoTGFtYmRhLmZ1bmN0aW9uTmFtZX0sXG4gICAgICB9KTtcbiAgICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfbWV0cmljX2dyb3VwMV8yID0gbmV3IE1ldHJpYyh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbWV0cmljXG4gICAgICAgIG5hbWVzcGFjZTogXCJBV1MvTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgbWV0cmljTmFtZTogXCJJbnZvY2F0aW9uc1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgZGltZW5zaW9uc01hcDoge1wiRnVuY3Rpb25OYW1lXCI6V2ViSGVhbHRoTGFtYmRhLmZ1bmN0aW9uTmFtZX0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaW1lbnNpb24gbWFwIG9mIHRoZSBtZXRyaWMgXG4gICAgICB9KTtcbiAgICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfbWV0cmljX2dyb3VwMV8zID0gbmV3IE1ldHJpYyh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbWV0cmljXG4gICAgICAgIG5hbWVzcGFjZTogXCJBV1MvTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgbWV0cmljTmFtZTogXCJFcnJvcnNcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgZGltZW5zaW9uc01hcDoge1wiRnVuY3Rpb25OYW1lXCI6V2ViSGVhbHRoTGFtYmRhLmZ1bmN0aW9uTmFtZX0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaW1lbnNpb24gbWFwIG9mIHRoZSBtZXRyaWMgXG4gICAgICB9KTtcbiAgICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfbWV0cmljX2dyb3VwMl8xID0gbmV3IE1ldHJpYyh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbWV0cmljXG4gICAgICAgIG5hbWVzcGFjZTogXCJBV1MvTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgbWV0cmljTmFtZTogXCJEdXJhdGlvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgZGltZW5zaW9uc01hcDoge1wiRnVuY3Rpb25OYW1lXCI6VXBkYXRlREJMYW1iZGEuZnVuY3Rpb25OYW1lfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaW1lbnNpb24gbWFwIG9mIHRoZSBtZXRyaWMgXG4gICAgICB9KTtcbiAgICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfbWV0cmljX2dyb3VwMl8yID0gbmV3IE1ldHJpYyh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbWV0cmljXG4gICAgICAgIG5hbWVzcGFjZTogXCJBV1MvTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgbWV0cmljTmFtZTogXCJJbnZvY2F0aW9uc1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgZGltZW5zaW9uc01hcDoge1wiRnVuY3Rpb25OYW1lXCI6VXBkYXRlREJMYW1iZGEuZnVuY3Rpb25OYW1lfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaW1lbnNpb24gbWFwIG9mIHRoZSBtZXRyaWMgXG4gICAgICB9KTtcbiAgICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfbWV0cmljX2dyb3VwMl8zID0gbmV3IE1ldHJpYyh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbWV0cmljXG4gICAgICAgIG5hbWVzcGFjZTogXCJBV1MvTGFtYmRhXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZXNwYWNlIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgbWV0cmljTmFtZTogXCJFcnJvcnNcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOYW1lIG9mIHRoZSBtZXRyaWNcbiAgICAgICAgZGltZW5zaW9uc01hcDoge1wiRnVuY3Rpb25OYW1lXCI6VXBkYXRlREJMYW1iZGEuZnVuY3Rpb25OYW1lfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaW1lbnNpb24gbWFwIG9mIHRoZSBtZXRyaWMgXG4gICAgICB9KTtcbiAgICAgIFxuICAgIC8vIENyZWF0ZSBBbGFybXMgZm9yIGRlcGxveW1lbnQgZ3JvdXBzXG4gICAgXG4gICAgY29uc3QgZmFpbHVyZV9hbGFybV9ncm91cDFfMSA9IG5ldyBBbGFybSh0aGlzLCBcIldlYkhlYWx0aExhbWJkYUR1cmF0aW9uQWxhcm1GYXJoYW5cIiwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IEFsYXJtXG4gICAgICAgIGFsYXJtRGVzY3JpcHRpb246IFwiVGhpcyBhbGFybXMgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGR1cmF0aW9uIG9mIGEgbGFtYmRhIGZ1bmN0aW9uIGlzIHRvbyBoaWdoXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVzY3JpcHRpb24gb2YgdGhlIGFsYXJtXG4gICAgICAgIGNvbXBhcmlzb25PcGVyYXRvcjogQ29tcGFyaXNvbk9wZXJhdG9yLkdSRUFURVJfVEhBTl9USFJFU0hPTEQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhvdyB0aGUgYWxhcm0gd2lsbCBiZSBjb21wYXJlZCB3aXRoIHRoZSB0aHJlc2hvbGRcbiAgICAgICAgdGhyZXNob2xkOiAzNTAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhyZXNob2xkIG92ZXIgd2hpY2ggdGhlIGFsYXJtIHdpbGwgYmUgY29tcGFyZWQgXG4gICAgICAgIGV2YWx1YXRpb25QZXJpb2RzOiAxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhvdyBtYW55IHRpbWUgdGhlIHRocmVzaG9sZCBuZWVkIHRvIGJlIGJyZWFjaGVkIGJlZm9yZSBhIGFsYXJtIGlzIHRyaWdnZXJlZCBcbiAgICAgICAgbWV0cmljOiBmYWlsdXJlX21ldHJpY19ncm91cDFfMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWV0cmljIG92ZXIgd2hpY2ggdGhlIGFsYXJtIHdpbGwgYmUgc2V0XG4gICAgICB9KTtcbiAgICAgIFxuICAgIGNvbnN0IGZhaWx1cmVfYWxhcm1fZ3JvdXAxXzIgPSBuZXcgQWxhcm0odGhpcywgXCJXZWJIZWFsdGhMYW1iZGFJbnZvY2F0aW9uQWxhcm1GYXJoYW5cIiwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBBbGFybVxuICAgICAgICBhbGFybURlc2NyaXB0aW9uOiBcIlRoaXMgYWxhcm1zIGlzIHRyaWdnZXJlZCB3aGVuIHRoZXJlIGFyZSB0b28gbWFueSBpbnZvY2F0aW9ucyBvZiBhIGxhbWJkYSBmdW5jdGlvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlc2NyaXB0aW9uIG9mIHRoZSBhbGFybVxuICAgICAgICBjb21wYXJpc29uT3BlcmF0b3I6IENvbXBhcmlzb25PcGVyYXRvci5HUkVBVEVSX1RIQU5fVEhSRVNIT0xELCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3cgdGhlIGFsYXJtIHdpbGwgYmUgY29tcGFyZWQgd2l0aCB0aGUgdGhyZXNob2xkXG4gICAgICAgIHRocmVzaG9sZDogMTAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRocmVzaG9sZCBvdmVyIHdoaWNoIHRoZSBhbGFybSB3aWxsIGJlIGNvbXBhcmVkIFxuICAgICAgICBldmFsdWF0aW9uUGVyaW9kczogMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3cgbWFueSB0aW1lIHRoZSB0aHJlc2hvbGQgbmVlZCB0byBiZSBicmVhY2hlZCBiZWZvcmUgYSBhbGFybSBpcyB0cmlnZ2VyZWQgXG4gICAgICAgIG1ldHJpYzogZmFpbHVyZV9tZXRyaWNfZ3JvdXAxXzIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHJpYyBvdmVyIHdoaWNoIHRoZSBhbGFybSB3aWxsIGJlIHNldFxuICAgICAgfSk7XG4gICAgICBcbiAgICBjb25zdCBmYWlsdXJlX2FsYXJtX2dyb3VwMV8zID0gbmV3IEFsYXJtKHRoaXMsIFwiV2ViSGVhbHRoTGFtYmRhRXJyb3JBbGFybUZhcmhhblwiLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQWxhcm1cbiAgICAgICAgYWxhcm1EZXNjcmlwdGlvbjogXCJUaGlzIGFsYXJtcyBpcyB0cmlnZ2VyZWQgd2hlbiB0aGVyZSBhcmUgZXJyb3JzIGR1cmluZyBleGVjdXRpb24gb2YgYSBsYW1iZGEgZnVuY3Rpb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXNjcmlwdGlvbiBvZiB0aGUgYWxhcm1cbiAgICAgICAgY29tcGFyaXNvbk9wZXJhdG9yOiBDb21wYXJpc29uT3BlcmF0b3IuR1JFQVRFUl9USEFOX1RIUkVTSE9MRCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IHRoZSBhbGFybSB3aWxsIGJlIGNvbXBhcmVkIHdpdGggdGhlIHRocmVzaG9sZFxuICAgICAgICB0aHJlc2hvbGQ6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaHJlc2hvbGQgb3ZlciB3aGljaCB0aGUgYWxhcm0gd2lsbCBiZSBjb21wYXJlZCBcbiAgICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgdGltZSB0aGUgdGhyZXNob2xkIG5lZWQgdG8gYmUgYnJlYWNoZWQgYmVmb3JlIGEgYWxhcm0gaXMgdHJpZ2dlcmVkXG4gICAgICAgIG1ldHJpYzogZmFpbHVyZV9tZXRyaWNfZ3JvdXAxXzMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHJpYyBvdmVyIHdoaWNoIHRoZSBhbGFybSB3aWxsIGJlIHNldFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGZhaWx1cmVfYWxhcm1fZ3JvdXAyXzEgPSBuZXcgQWxhcm0odGhpcywgXCJVcGRhdGVEQkxhbWJkYUR1cmF0aW9uQWxhcm1GYXJoYW5cIiwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQWxhcm1cbiAgICAgICAgYWxhcm1EZXNjcmlwdGlvbjogXCJUaGlzIGFsYXJtcyBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgZHVyYXRpb24gb2YgYSBsYW1iZGEgZnVuY3Rpb24gaXMgdG9vIGhpZ2hcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXNjcmlwdGlvbiBvZiB0aGUgYWxhcm1cbiAgICAgICAgY29tcGFyaXNvbk9wZXJhdG9yOiBDb21wYXJpc29uT3BlcmF0b3IuR1JFQVRFUl9USEFOX1RIUkVTSE9MRCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IHRoZSBhbGFybSB3aWxsIGJlIGNvbXBhcmVkIHdpdGggdGhlIHRocmVzaG9sZFxuICAgICAgICB0aHJlc2hvbGQ6IDUwMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaHJlc2hvbGQgb3ZlciB3aGljaCB0aGUgYWxhcm0gd2lsbCBiZSBjb21wYXJlZCBcbiAgICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgdGltZSB0aGUgdGhyZXNob2xkIG5lZWQgdG8gYmUgYnJlYWNoZWQgYmVmb3JlIGEgYWxhcm0gaXMgdHJpZ2dlcmVkXG4gICAgICAgIG1ldHJpYzogZmFpbHVyZV9tZXRyaWNfZ3JvdXAyXzEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHJpYyBvdmVyIHdoaWNoIHRoZSBhbGFybSB3aWxsIGJlIHNldFxuICAgICAgfSk7XG4gICAgICBcbiAgICBjb25zdCBmYWlsdXJlX2FsYXJtX2dyb3VwMl8yID0gbmV3IEFsYXJtKHRoaXMsIFwiVXBkYXRlREJMYW1iZGFJbnZvY2F0aW9uQWxhcm1GYXJoYW5cIiwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQWxhcm1cbiAgICAgICAgYWxhcm1EZXNjcmlwdGlvbjogXCJUaGlzIGFsYXJtcyBpcyB0cmlnZ2VyZWQgd2hlbiB0aGVyZSBhcmUgZXJyb3JzIGR1cmluZyBleGVjdXRpb24gb2YgYSBsYW1iZGEgZnVuY3Rpb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXNjcmlwdGlvbiBvZiB0aGUgYWxhcm1cbiAgICAgICAgY29tcGFyaXNvbk9wZXJhdG9yOiBDb21wYXJpc29uT3BlcmF0b3IuR1JFQVRFUl9USEFOX1RIUkVTSE9MRCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IHRoZSBhbGFybSB3aWxsIGJlIGNvbXBhcmVkIHdpdGggdGhlIHRocmVzaG9sZFxuICAgICAgICB0aHJlc2hvbGQ6IDEwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaHJlc2hvbGQgb3ZlciB3aGljaCB0aGUgYWxhcm0gd2lsbCBiZSBjb21wYXJlZCBcbiAgICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgdGltZSB0aGUgdGhyZXNob2xkIG5lZWQgdG8gYmUgYnJlYWNoZWQgYmVmb3JlIGEgYWxhcm0gaXMgdHJpZ2dlcmVkXG4gICAgICAgIG1ldHJpYzogZmFpbHVyZV9tZXRyaWNfZ3JvdXAyXzIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHJpYyBvdmVyIHdoaWNoIHRoZSBhbGFybSB3aWxsIGJlIHNldFxuICAgICAgfSk7XG4gICAgICBcbiAgICBjb25zdCBmYWlsdXJlX2FsYXJtX2dyb3VwMl8zID0gbmV3IEFsYXJtKHRoaXMsIFwiVXBkYXRlREJMYW1iZGFFcnJvckFsYXJtRmFyaGFuXCIsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQWxhcm1cbiAgICAgICAgYWxhcm1EZXNjcmlwdGlvbjogXCJUaGlzIGFsYXJtcyBpcyB0cmlnZ2VyZWQgd2hlbiB0aGVyZSBhcmUgZXJyb3JzIGR1cmluZyBleGVjdXRpb24gb2YgYSBsYW1iZGEgZnVuY3Rpb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXNjcmlwdGlvbiBvZiB0aGUgYWxhcm1cbiAgICAgICAgY29tcGFyaXNvbk9wZXJhdG9yOiBDb21wYXJpc29uT3BlcmF0b3IuR1JFQVRFUl9USEFOX1RIUkVTSE9MRCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IHRoZSBhbGFybSB3aWxsIGJlIGNvbXBhcmVkIHdpdGggdGhlIHRocmVzaG9sZFxuICAgICAgICB0aHJlc2hvbGQ6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaHJlc2hvbGQgb3ZlciB3aGljaCB0aGUgYWxhcm0gd2lsbCBiZSBjb21wYXJlZCBcbiAgICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgdGltZSB0aGUgdGhyZXNob2xkIG5lZWQgdG8gYmUgYnJlYWNoZWQgYmVmb3JlIGEgYWxhcm0gaXMgdHJpZ2dlcmVkXG4gICAgICAgIG1ldHJpYzogZmFpbHVyZV9tZXRyaWNfZ3JvdXAyXzMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHJpYyBvdmVyIHdoaWNoIHRoZSBhbGFybSB3aWxsIGJlIHNldFxuICAgICAgfSk7XG4gICAgICBcbiAgICAvLyBBZGQgYWN0aW9ucyB0byBkZXBsb3ltZW50IGdyb3VwIGFsYXJtc1xuICAgIFxuICAgIGZhaWx1cmVfYWxhcm1fZ3JvdXAxXzEuYWRkQWxhcm1BY3Rpb24obmV3IFNuc0FjdGlvbihEZXBsb3ltZW50R3JvdXBBbGFybVRvcGljKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYW4gU05TIGFjdGlvbiB0byB0aGF0IGFsYXJtXG4gICAgZmFpbHVyZV9hbGFybV9ncm91cDFfMi5hZGRBbGFybUFjdGlvbihuZXcgU25zQWN0aW9uKERlcGxveW1lbnRHcm91cEFsYXJtVG9waWMpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBhbiBTTlMgYWN0aW9uIHRvIHRoYXQgYWxhcm1cbiAgICBmYWlsdXJlX2FsYXJtX2dyb3VwMV8zLmFkZEFsYXJtQWN0aW9uKG5ldyBTbnNBY3Rpb24oRGVwbG95bWVudEdyb3VwQWxhcm1Ub3BpYykpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFuIFNOUyBhY3Rpb24gdG8gdGhhdCBhbGFybVxuICAgIGZhaWx1cmVfYWxhcm1fZ3JvdXAyXzEuYWRkQWxhcm1BY3Rpb24obmV3IFNuc0FjdGlvbihEZXBsb3ltZW50R3JvdXBBbGFybVRvcGljKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYW4gU05TIGFjdGlvbiB0byB0aGF0IGFsYXJtXG4gICAgZmFpbHVyZV9hbGFybV9ncm91cDJfMi5hZGRBbGFybUFjdGlvbihuZXcgU25zQWN0aW9uKERlcGxveW1lbnRHcm91cEFsYXJtVG9waWMpKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBhbiBTTlMgYWN0aW9uIHRvIHRoYXQgYWxhcm1cbiAgICBmYWlsdXJlX2FsYXJtX2dyb3VwMl8zLmFkZEFsYXJtQWN0aW9uKG5ldyBTbnNBY3Rpb24oRGVwbG95bWVudEdyb3VwQWxhcm1Ub3BpYykpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFuIFNOUyBhY3Rpb24gdG8gdGhhdCBhbGFybVxuICAgIFxuICAgIC8vIENyZWF0ZSBBbGlhcyBmb3IgTGFtYmRhIGZ1bmN0aW9uc1xuXG4gICAgY29uc3QgYWxpYXNXZWJIZWFsdGggPSBuZXcgQWxpYXModGhpcywgJ1dITGFtYmRhQWxpYXMnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhbiBhbGlhcyBmb3Igd2ViIGhlYWx0aCBsYW1iZGEgZnVuY3Rpb25cbiAgICAgIGFsaWFzTmFtZTogJ1dITGFtYmRhQ3VycmVudCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSBvZiB0aGUgYWxpYXMgdGhhdCB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgIHZlcnNpb246IFdlYkhlYWx0aExhbWJkYS5jdXJyZW50VmVyc2lvbiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVyc2lvbiBvZiB0aGUgbGFtYmRhIGZ1bmN0aW9uIGZvciB0aGUgYWxpYXNcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBhbGlhc1VwZGF0ZURCID0gbmV3IEFsaWFzKHRoaXMsICdVcGRhdGVEQkxhbWJkYUFsaWFzJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGFuIGFsaWFzIGZvciBVcGRhdGUgREIgbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBhbGlhc05hbWU6ICdVcGRhdGVEQkxhbWJkYUN1cnJlbnQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5hbWUgb2YgdGhlIGFsaWFzIHRoYXQgd2lsbCBiZSBjcmVhdGVkXG4gICAgICB2ZXJzaW9uOiBVcGRhdGVEQkxhbWJkYS5jdXJyZW50VmVyc2lvbiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcnNpb24gb2YgdGhlIGxhbWJkYSBmdW5jdGlvbiBmb3IgdGhlIGFsaWFzXG4gICAgfSk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIERlcGxveW1lbnQgR3JvdXBzIGZvciBMYW1iZGEgRnVuY3Rpb25zXG4gICAgXG4gICAgY29uc3QgZGVwbG95bWVudF9ncm91cDEgPSBuZXcgTGFtYmRhRGVwbG95bWVudEdyb3VwKHRoaXMsICdGYXJoYW5fUHJvZF9EZXBsb3ltZW50X1dITCcsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGRlcGxveW1lbnQgZ3JvdXAgZm9yIHdlYiBoZWFsdGggbGFtYmRhIGZ1bmN0aW9uXG4gICAgICBhbGlhczogYWxpYXNXZWJIZWFsdGgsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsaWFzIHRoYXQgd2lsbCBiZSB1c2VkIGluIHRoZSBkZXBsb3ltZW50IGdyb3VwXG4gICAgICBkZXBsb3ltZW50Q29uZmlnOiBMYW1iZGFEZXBsb3ltZW50Q29uZmlnLkxJTkVBUl8xMFBFUkNFTlRfRVZFUllfMTBNSU5VVEVTLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlcGxveW1lbnQgY29uZmlndXJhdGlvbiBmb3IgdGhlIGRlcGxveW1lbnQgZ3JvdXBcbiAgICAgIGFsYXJtczogW2ZhaWx1cmVfYWxhcm1fZ3JvdXAxXzEsZmFpbHVyZV9hbGFybV9ncm91cDFfMixmYWlsdXJlX2FsYXJtX2dyb3VwMV8zXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxhcm1zIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBhdXRvIHJvbGwgYmFja1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IGRlcGxveW1lbnRfZ3JvdXAyID0gbmV3IExhbWJkYURlcGxveW1lbnRHcm91cCh0aGlzLCAnRmFyaGFuX1Byb2RfRGVwbG95bWVudF9VUERCTCcsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBkZXBsb3ltZW50IGdyb3VwIGZvciBVcGRhdGVEQiBsYW1iZGEgZnVuY3Rpb25cbiAgICAgIGFsaWFzOiBhbGlhc1VwZGF0ZURCLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxpYXMgdGhhdCB3aWxsIGJlIHVzZWQgaW4gdGhlIGRlcGxveW1lbnQgZ3JvdXBcbiAgICAgIGRlcGxveW1lbnRDb25maWc6IExhbWJkYURlcGxveW1lbnRDb25maWcuTElORUFSXzEwUEVSQ0VOVF9FVkVSWV8xME1JTlVURVMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVwbG95bWVudCBjb25maWd1cmF0aW9uIGZvciB0aGUgZGVwbG95bWVudCBncm91cFxuICAgICAgYWxhcm1zOiBbZmFpbHVyZV9hbGFybV9ncm91cDJfMSxmYWlsdXJlX2FsYXJtX2dyb3VwMl8yLGZhaWx1cmVfYWxhcm1fZ3JvdXAyXzNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGFybXMgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIGF1dG8gcm9sbCBiYWNrXG4gICAgfSk7XG4gICAgXG4gIH1cbn1cbiJdfQ==