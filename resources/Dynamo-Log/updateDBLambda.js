"use strict";
// Import statements
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateDBSNS = void 0;
const helperDynamoDB_1 = require("./helpers/helperDynamoDB"); // For putting the item into the DynamoDB
const { env } = require('process'); // Environment Variables 
// Defination Statements
async function updateDBSNS(event, context) {
    // Set Constants
    const DYNAMO_DB_NAME = env.DYNAMO_DB_NAME; // Get the name of the DynamoDB Table from the environment variable
    const DYNAMO_DB_KEY = env.DYNAMO_DB_KEY; // Get the Partition Key of the DynamoDB Table from the environment variable
    const DYNAMO_DB_SORT = env.DYNAMO_DB_SORT; // Get the Sort Key of the DynamoDB Table from the environment variable
    // Parse the Json in event object to get the requred data
    const Response = event["Records"][0]["Sns"]; // Set handle on SNS dictionary
    const Message = JSON.parse(Response["Message"]); // Load the splited "Message" to join it back into a dictionary and set it handle
    const Metric = Message["Trigger"]["MetricName"]; // Metric on which alarm triggered on
    const Threshold = Message["Trigger"]["Threshold"]; // Threshold for the alarm
    const URL = Message["Trigger"]["Dimensions"][0]["value"]; // URL of the website that triggered the alarm
    // Set Item constants
    const MessageID = Response["MessageId"]; // Partition Key
    const TimeStamp = Response["Timestamp"]; // Sort Key
    // Set variables
    let AlarmName = Message["AlarmName"]; // Name of the Alarm
    if (AlarmName == null) { // Alarm name was not set
        AlarmName = "No name given"; // Set default value
    }
    let AlarmDescription = Message["AlarmDescription"]; // Description of the Alarm
    if (AlarmDescription == null) { // Alarm description was not set
        AlarmDescription = "no Description given"; // Set default value
    }
    let AlarmReason = Message["NewStateReason"]; // Reason why alarm was triggered
    if (AlarmReason == null) { // Alarm reason was not set
        AlarmReason = "no reason given"; // Set default value
    }
    // Create Item from the parsed data
    const Item = {
        [DYNAMO_DB_KEY]: { S: MessageID },
        [DYNAMO_DB_SORT]: { S: TimeStamp },
        "Alarm Name": { S: AlarmName },
        "Alarm Description": { S: AlarmDescription },
        "Reason Alarm Triggered": { S: AlarmReason },
        "Metric": { S: Metric },
        "Threshold": { S: Threshold.toString() },
        "URL": { S: URL } // URL of the website that triggered the alarm
    };
    // Insert the created Item into the DynamoDB table
    await helperDynamoDB_1.helperDynamoDB.putItemDB(DYNAMO_DB_NAME, Item); // A helper method that inserts an item into a specified table
}
exports.updateDBSNS = updateDBSNS;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlREJMYW1iZGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1cGRhdGVEQkxhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0JBQW9COzs7QUFFcEIsNkRBQStELENBQUsseUNBQXlDO0FBQzdHLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBa0MseUJBQXlCO0FBRTdGLHdCQUF3QjtBQUVqQixLQUFLLFVBQVUsV0FBVyxDQUFDLEtBQVMsRUFBQyxPQUFXO0lBRW5ELGdCQUFnQjtJQUVoQixNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFBLENBQXVCLG1FQUFtRTtJQUNuSSxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFBLENBQXlCLDRFQUE0RTtJQUM1SSxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFBLENBQXVCLHVFQUF1RTtJQUV2SSx5REFBeUQ7SUFFekQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQXNCLCtCQUErQjtJQUNoRyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBLENBQWtCLGlGQUFpRjtJQUNsSixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBa0IscUNBQXFDO0lBQ3RHLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFnQiwwQkFBMEI7SUFDM0YsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQVMsOENBQThDO0lBRS9HLHFCQUFxQjtJQUdyQixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBMEIsZ0JBQWdCO0lBQ2pGLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUEwQixXQUFXO0lBRTVFLGdCQUFnQjtJQUVoQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBNkIsb0JBQW9CO0lBQ3JGLElBQUksU0FBUyxJQUFJLElBQUksRUFBRSxFQUEwQyx5QkFBeUI7UUFDdEYsU0FBUyxHQUFHLGVBQWUsQ0FBQSxDQUFrQyxvQkFBb0I7S0FDcEY7SUFFRCxJQUFJLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBLENBQWUsMkJBQTJCO0lBQzVGLElBQUksZ0JBQWdCLElBQUksSUFBSSxFQUFFLEVBQW1DLGdDQUFnQztRQUM3RixnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQSxDQUFvQixvQkFBb0I7S0FDcEY7SUFFRCxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQSxDQUFzQixpQ0FBaUM7SUFDbEcsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFLEVBQXdDLDJCQUEyQjtRQUN4RixXQUFXLEdBQUcsaUJBQWlCLENBQUEsQ0FBOEIsb0JBQW9CO0tBQ3BGO0lBRUQsbUNBQW1DO0lBRW5DLE1BQU0sSUFBSSxHQUFHO1FBQ1QsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7UUFDakMsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7UUFDbEMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtRQUM5QixtQkFBbUIsRUFBQyxFQUFFLENBQUMsRUFBRSxnQkFBZ0IsRUFBRTtRQUMzQyx3QkFBd0IsRUFBRSxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUM7UUFDM0MsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRTtRQUN2QixXQUFXLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQ3hDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBNEMsOENBQThDO0tBQzlHLENBQUE7SUFFRCxrREFBa0Q7SUFFbEQsTUFBTSwrQkFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUEsQ0FBdUIsOERBQThEO0FBQ2pJLENBQUM7QUF2REgsa0NBdURHO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydCBzdGF0ZW1lbnRzXG5cbmltcG9ydCB7aGVscGVyRHluYW1vREIgYXMgRHlEQn0gZnJvbSAnLi9oZWxwZXJzL2hlbHBlckR5bmFtb0RCJyAgICAgLy8gRm9yIHB1dHRpbmcgdGhlIGl0ZW0gaW50byB0aGUgRHluYW1vREJcbmNvbnN0IHsgZW52IH0gPSByZXF1aXJlKCdwcm9jZXNzJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW52aXJvbm1lbnQgVmFyaWFibGVzIFxuXG4vLyBEZWZpbmF0aW9uIFN0YXRlbWVudHNcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURCU05TKGV2ZW50OmFueSxjb250ZXh0OmFueSkgeyAgICAgICAgICAvLyBVcGRhdGUgREIgTGFtYmRhIGhhbmRsZXJcbiAgICBcbiAgICAvLyBTZXQgQ29uc3RhbnRzXG4gICAgXG4gICAgY29uc3QgRFlOQU1PX0RCX05BTUUgPSBlbnYuRFlOQU1PX0RCX05BTUUgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbmFtZSBvZiB0aGUgRHluYW1vREIgVGFibGUgZnJvbSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVcbiAgICBjb25zdCBEWU5BTU9fREJfS0VZID0gZW52LkRZTkFNT19EQl9LRVkgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBQYXJ0aXRpb24gS2V5IG9mIHRoZSBEeW5hbW9EQiBUYWJsZSBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgIGNvbnN0IERZTkFNT19EQl9TT1JUID0gZW52LkRZTkFNT19EQl9TT1JUICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIFNvcnQgS2V5IG9mIHRoZSBEeW5hbW9EQiBUYWJsZSBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuXG4gICAgLy8gUGFyc2UgdGhlIEpzb24gaW4gZXZlbnQgb2JqZWN0IHRvIGdldCB0aGUgcmVxdXJlZCBkYXRhXG5cbiAgICBjb25zdCBSZXNwb25zZSA9IGV2ZW50W1wiUmVjb3Jkc1wiXVswXVtcIlNuc1wiXSAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgaGFuZGxlIG9uIFNOUyBkaWN0aW9uYXJ5XG4gICAgY29uc3QgTWVzc2FnZSA9IEpTT04ucGFyc2UoUmVzcG9uc2VbXCJNZXNzYWdlXCJdKSAgICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIHNwbGl0ZWQgXCJNZXNzYWdlXCIgdG8gam9pbiBpdCBiYWNrIGludG8gYSBkaWN0aW9uYXJ5IGFuZCBzZXQgaXQgaGFuZGxlXG4gICAgY29uc3QgTWV0cmljID0gTWVzc2FnZVtcIlRyaWdnZXJcIl1bXCJNZXRyaWNOYW1lXCJdICAgICAgICAgICAgICAgICAgLy8gTWV0cmljIG9uIHdoaWNoIGFsYXJtIHRyaWdnZXJlZCBvblxuICAgIGNvbnN0IFRocmVzaG9sZCA9IE1lc3NhZ2VbXCJUcmlnZ2VyXCJdW1wiVGhyZXNob2xkXCJdICAgICAgICAgICAgICAgIC8vIFRocmVzaG9sZCBmb3IgdGhlIGFsYXJtXG4gICAgY29uc3QgVVJMID0gTWVzc2FnZVtcIlRyaWdnZXJcIl1bXCJEaW1lbnNpb25zXCJdWzBdW1widmFsdWVcIl0gICAgICAgICAvLyBVUkwgb2YgdGhlIHdlYnNpdGUgdGhhdCB0cmlnZ2VyZWQgdGhlIGFsYXJtXG4gICAgXG4gICAgLy8gU2V0IEl0ZW0gY29uc3RhbnRzXG4gICAgXG4gICAgXG4gICAgY29uc3QgTWVzc2FnZUlEID0gUmVzcG9uc2VbXCJNZXNzYWdlSWRcIl0gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcnRpdGlvbiBLZXlcbiAgICBjb25zdCBUaW1lU3RhbXAgPSBSZXNwb25zZVtcIlRpbWVzdGFtcFwiXSAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ydCBLZXlcbiAgICBcbiAgICAvLyBTZXQgdmFyaWFibGVzXG4gICAgXG4gICAgbGV0IEFsYXJtTmFtZSA9IE1lc3NhZ2VbXCJBbGFybU5hbWVcIl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5hbWUgb2YgdGhlIEFsYXJtXG4gICAgaWYgKEFsYXJtTmFtZSA9PSBudWxsKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGFybSBuYW1lIHdhcyBub3Qgc2V0XG4gICAgICAgIEFsYXJtTmFtZSA9IFwiTm8gbmFtZSBnaXZlblwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBkZWZhdWx0IHZhbHVlXG4gICAgfVxuICAgIFxuICAgIGxldCBBbGFybURlc2NyaXB0aW9uID0gTWVzc2FnZVtcIkFsYXJtRGVzY3JpcHRpb25cIl0gICAgICAgICAgICAgICAvLyBEZXNjcmlwdGlvbiBvZiB0aGUgQWxhcm1cbiAgICBpZiAoQWxhcm1EZXNjcmlwdGlvbiA9PSBudWxsKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsYXJtIGRlc2NyaXB0aW9uIHdhcyBub3Qgc2V0XG4gICAgICAgIEFsYXJtRGVzY3JpcHRpb24gPSBcIm5vIERlc2NyaXB0aW9uIGdpdmVuXCIgICAgICAgICAgICAgICAgICAgIC8vIFNldCBkZWZhdWx0IHZhbHVlXG4gICAgfVxuICAgIFxuICAgIGxldCBBbGFybVJlYXNvbiA9IE1lc3NhZ2VbXCJOZXdTdGF0ZVJlYXNvblwiXSAgICAgICAgICAgICAgICAgICAgICAvLyBSZWFzb24gd2h5IGFsYXJtIHdhcyB0cmlnZ2VyZWRcbiAgICBpZiAoQWxhcm1SZWFzb24gPT0gbnVsbCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsYXJtIHJlYXNvbiB3YXMgbm90IHNldFxuICAgICAgICBBbGFybVJlYXNvbiA9IFwibm8gcmVhc29uIGdpdmVuXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZGVmYXVsdCB2YWx1ZVxuICAgIH1cbiAgICBcbiAgICAvLyBDcmVhdGUgSXRlbSBmcm9tIHRoZSBwYXJzZWQgZGF0YVxuXG4gICAgY29uc3QgSXRlbSA9IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIFNvcnQgS2V5IG9mIHRoZSBEeW5hbW9EQiBUYWJsZSBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICAgICAgICBbRFlOQU1PX0RCX0tFWV06IHsgUzogTWVzc2FnZUlEIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFydGl0aW9uIEtleVxuICAgICAgICBbRFlOQU1PX0RCX1NPUlRdOiB7IFM6IFRpbWVTdGFtcCB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ydCBLZXlcbiAgICAgICAgXCJBbGFybSBOYW1lXCI6IHsgUzogQWxhcm1OYW1lIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmFtZSBvZiB0aGUgQWxhcm1cbiAgICAgICAgXCJBbGFybSBEZXNjcmlwdGlvblwiOnsgUzogQWxhcm1EZXNjcmlwdGlvbiB9LCAgICAgICAgICAgICAgICAgLy8gRGVzY3JpcHRpb24gb2YgdGhlIEFsYXJtXG4gICAgICAgIFwiUmVhc29uIEFsYXJtIFRyaWdnZXJlZFwiOiB7IFM6IEFsYXJtUmVhc29ufSwgICAgICAgICAgICAgICAgIC8vIFJlYXNvbiB3aHkgYWxhcm0gd2FzIHRyaWdnZXJlZFxuICAgICAgICBcIk1ldHJpY1wiOiB7IFM6IE1ldHJpYyB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXRyaWMgb24gd2hpY2ggYWxhcm0gdHJpZ2dlcmVkIG9uXG4gICAgICAgIFwiVGhyZXNob2xkXCI6IHsgUzogVGhyZXNob2xkLnRvU3RyaW5nKCkgfSwgICAgICAgICAgICAgICAgICAgIC8vIFRocmVzaG9sZCBmb3IgdGhlIGFsYXJtXG4gICAgICAgIFwiVVJMXCI6IHsgUzogVVJMIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVSTCBvZiB0aGUgd2Vic2l0ZSB0aGF0IHRyaWdnZXJlZCB0aGUgYWxhcm1cbiAgICB9XG5cbiAgICAvLyBJbnNlcnQgdGhlIGNyZWF0ZWQgSXRlbSBpbnRvIHRoZSBEeW5hbW9EQiB0YWJsZVxuXG4gICAgYXdhaXQgRHlEQi5wdXRJdGVtREIoRFlOQU1PX0RCX05BTUUsIEl0ZW0pICAgICAgICAgICAgICAgICAgICAgICAvLyBBIGhlbHBlciBtZXRob2QgdGhhdCBpbnNlcnRzIGFuIGl0ZW0gaW50byBhIHNwZWNpZmllZCB0YWJsZVxuICB9OyJdfQ==