"use strict";
// Import statements
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib"); // AWS CDK
const assertions_1 = require("aws-cdk-lib/assertions"); // For creating templates
const sprint7 = require("../lib/sprint7-stack"); // Stack to be tested
//  Tests
// Test if our application have correct no of resources
test('test bucket count', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.resourceCountIs("AWS::S3::Bucket", 1); // Bucket count
});
test('test lambda count', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.resourceCountIs("AWS::Lambda::Function", 5); // Lambda Function count
});
test('test alarm count', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.resourceCountIs("AWS::CloudWatch::Alarm", 6); // CloudWatch Alarm count
});
test('test sns count', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.resourceCountIs("AWS::SNS::Subscription", 2); // SNS Topic count
});
test('test dynamoDB count', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.resourceCountIs("AWS::DynamoDB::Table", 1); // DynamoDB Table count
});
test('test rule count', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.resourceCountIs("AWS::Events::Rule", 1); // Event Rule count
});
// Test if the sns topic have correct protocols and endpoints
test('test email SNSsubscription', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.hasResourceProperties("AWS::SNS::Subscription", {
        "Protocol": "email",
        "Endpoint": "farhan.kiyani.skipq@gmail.com" // SNS Subscripton End Point 
    });
});
test('test lambda SNSsubscription', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in tests
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.hasResourceProperties("AWS::SNS::Subscription", {
        "Protocol": "lambda",
        "Endpoint": {
            "Fn::GetAtt": [
                "updateDB5B429E44",
                "Arn" // Endpoint Specification
            ]
        }
    });
});
// Test if we have created a cron job for web health function
test('test cronexpression rule', () => {
    const app = new cdk.App(); // Define App
    const stack = new sprint7.sprint7FarhanStack(app, 'MyTestStack'); // Define the stack to be used in test
    const template = assertions_1.Template.fromStack(stack); // Create the template to use in our tests
    template.hasResourceProperties("AWS::Events::Rule", {
        "ScheduleExpression": "cron(* * * * ? *)",
        "State": "ENABLED",
    });
});
//# sourceMappingURL=data:application/json;base64,